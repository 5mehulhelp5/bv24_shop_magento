<?php
/**
 * Copyright © Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

/**
 * Top menu for store
 *
 * @var $block \Magento\Theme\Block\Html\Topmenu
 */

$columnsLimit = $block->getColumnsLimit() ?: 0;
$_menuHtml = $block->getHtml('level-top', 'submenu', $columnsLimit)
?>

<nav class="navigation" data-action="navigation">
    <ul data-mage-init='{"menu":{"responsive":true, "expanded":true, "position":{"my":"left top","at":"left bottom"}}}'>
        <?= /* @noEscape */ $_menuHtml?>
        <?= $block->getChildHtml() ?>
    </ul>
</nav>

<script>
document.addEventListener('DOMContentLoaded', function() {
    let isMobileInitialized = false;
    let isDesktopInitialized = false;

    initializeMenu();

    // Listen for window resize events
    let resizeTimeout;
    window.addEventListener('resize', function() {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(function() {
            initializeMenu();
        }, 250); // Debounce resize events
    });

    function initializeMenu() {
        const isMobile = window.innerWidth <= 767;

        if (isMobile && !isMobileInitialized) {
            // Initialize mobile functionality
            addViewAllLinks();
            setupMobileToggle();
            expandToActiveCategory();
            isMobileInitialized = true;

            // Clean up desktop when switching to mobile
            if (isDesktopInitialized) {
                cleanupDesktopMenu();
                isDesktopInitialized = false;
            }
        } else if (!isMobile && !isDesktopInitialized) {
            // Initialize desktop functionality
            addDesktopViewAllLinks();
            setupDesktopBehavior();
            isDesktopInitialized = true;

            // Clean up mobile when switching to desktop
            if (isMobileInitialized) {
                cleanupMobileMenu();
                isMobileInitialized = false;
            }
        }
    }

    function cleanupDesktopMenu() {
        // Remove "Alle [Kategorie]" links for desktop
        document.querySelectorAll('.navigation .desktop-view-all-link').forEach(function(link) {
            link.remove();
        });
    }

    function cleanupMobileMenu() {
        // Remove expanded classes
        document.querySelectorAll('.navigation .expanded').forEach(function(item) {
            item.classList.remove('expanded');
        });

        // Reset inline styles
        document.querySelectorAll('.navigation .submenu').forEach(function(submenu) {
            submenu.style.maxHeight = '';
            submenu.style.display = '';
        });

        // Remove "Alle [Kategorie]" links
        document.querySelectorAll('.navigation .view-all-link').forEach(function(link) {
            link.remove();
        });

        // Restore parent classes that were removed for non-toggleable items
        // This is a bit complex as we would need to track original state
        // For now, we rely on page refresh for full cleanup
    }

    function addDesktopViewAllLinks() {
        // Add "Alle [Kategorie]" links nur für Level 0
        const level0Items = document.querySelectorAll('.navigation .level0.parent');

        level0Items.forEach(function(item) {
            const parentLink = item.querySelector('.level-top');
            const submenu = item.querySelector('.submenu');

            if (parentLink && submenu) {
                const categoryName = parentLink.textContent.trim();
                const categoryUrl = parentLink.getAttribute('href');

                if (categoryUrl && categoryUrl !== '#') {
                    // Create "Alle [Kategorie]" link
                    const viewAllLink = document.createElement('li');
                    viewAllLink.className = 'level1 desktop-view-all-link';
                    viewAllLink.innerHTML = `<a href="${categoryUrl}"><strong>Alle ${categoryName}</strong></a>`;

                    // Insert as first child of submenu
                    submenu.insertBefore(viewAllLink, submenu.firstChild);
                }

                // Add close button for tablets (only on touch devices)
                const isTouchDevice = ('ontouchstart' in window) || (navigator.maxTouchPoints > 0);
                if (isTouchDevice) {
                    const closeButton = document.createElement('button');
                    closeButton.className = 'menu-close-btn';
                    closeButton.innerHTML = '&times;';
                    closeButton.setAttribute('aria-label', 'Menü schließen');

                    closeButton.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        item.classList.remove('menu-open');
                    });

                    submenu.appendChild(closeButton);
                }
            }
        });
    }

    function setupDesktopBehavior() {
        const isTouchDevice = ('ontouchstart' in window) || (navigator.maxTouchPoints > 0);

        if (isTouchDevice) {
            // Touch/Tablet: Click-to-toggle
            const level0Items = document.querySelectorAll('.navigation .level0.parent');

            level0Items.forEach(function(item) {
                const parentLink = item.querySelector('.level-top');

                if (parentLink) {
                    // Prevent default link click
                    parentLink.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();

                        const isOpen = item.classList.contains('menu-open');

                        // Close all other menus
                        document.querySelectorAll('.navigation .level0.parent').forEach(function(otherItem) {
                            if (otherItem !== item) {
                                otherItem.classList.remove('menu-open');
                            }
                        });

                        // Toggle current menu
                        if (isOpen) {
                            item.classList.remove('menu-open');
                        } else {
                            item.classList.add('menu-open');
                        }
                    });
                }
            });

            // Close menus when clicking outside
            document.addEventListener('click', function(e) {
                if (!e.target.closest('.navigation')) {
                    document.querySelectorAll('.navigation .level0.parent.menu-open').forEach(function(item) {
                        item.classList.remove('menu-open');
                    });
                }
            });
        } else {
            // Desktop mit Maus: Level 0 Links deaktivieren (nur Hover)
            const level0Links = document.querySelectorAll('.navigation .level0.parent > .level-top');

            level0Links.forEach(function(link) {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                });

                // Add pointer cursor
                link.style.cursor = 'pointer';
            });
        }
    }


    function addViewAllLinks() {
        // Level 0 doesn't need "Alle [Kategorie]" links anymore
        // Only Level 1 will get them via setupMobileToggle()
    }

    function setupMobileToggle() {
        const parentItems = document.querySelectorAll('.navigation .level0.parent');

        parentItems.forEach(function(item) {
            const parentLink = item.querySelector('.level-top');
            const submenu = item.querySelector('.submenu');

            if (parentLink && submenu) {
                // Add click handler only to the main parent link
                parentLink.addEventListener('click', function(e) {
                    // Only prevent default for the parent link itself
                    if (e.target === parentLink || parentLink.contains(e.target)) {
                        e.preventDefault();
                        e.stopPropagation();

                        // Close other expanded items (only level0)
                        document.querySelectorAll('.navigation .level0.parent.expanded').forEach(function(otherItem) {
                            if (otherItem !== item) {
                                otherItem.classList.remove('expanded');
                                // Also hide submenu for closed items
                                const otherSubmenu = otherItem.querySelector('.submenu');
                                if (otherSubmenu) {
                                    otherSubmenu.style.maxHeight = '';
                                    otherSubmenu.style.display = '';
                                }
                            }
                        });

                        // Toggle current item
                        const isExpanded = item.classList.contains('expanded');
                        if (isExpanded) {
                            item.classList.remove('expanded');
                            // Hide submenu
                            submenu.style.maxHeight = '';
                            submenu.style.display = '';
                        } else {
                            item.classList.add('expanded');
                            // Show submenu
                            submenu.style.maxHeight = '1000px';
                            submenu.style.display = 'block';
                        }
                    }
                }, true);

                // Keep href for Level 0 - they should remain clickable links
            }
        });

        // Handle level1+ parent items - simpler approach
        const level1Parents = document.querySelectorAll('.navigation .level1.parent, .navigation .level2.parent');
        level1Parents.forEach(function(item) {
            const parentLink = item.querySelector('a');
            const submenu = item.querySelector('.submenu');


            if (parentLink && submenu) {
                // Check if submenu has actual li children that are not view-all-links
                const submenuItems = submenu.querySelectorAll('li:not(.view-all-link)');

                // Check if any of the submenu items have their own submenus (are parents)
                const hasSubParents = Array.from(submenuItems).some(li => li.classList.contains('parent'));

                if (submenuItems.length > 1 || hasSubParents) {
                    // This item has meaningful submenu content - make it toggleable
                    const categoryName = parentLink.textContent.trim();
                    const categoryUrl = parentLink.getAttribute('href');

                    // Add "Alle [Kategorie]" link as first menu item in submenu
                    const viewAllLink = document.createElement('li');
                    viewAllLink.className = 'view-all-link';
                    viewAllLink.innerHTML = `<a href="${categoryUrl}">Alle ${categoryName}</a>`;

                    // Insert as first child of submenu
                    submenu.insertBefore(viewAllLink, submenu.firstChild);

                    // Add toggle functionality to the parent link
                    parentLink.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();

                        // Close other expanded items at same level
                        const sameLevel = item.classList.contains('level1') ? '.level1.parent' : '.level2.parent';
                        document.querySelectorAll(`.navigation ${sameLevel}.expanded`).forEach(function(otherItem) {
                            if (otherItem !== item) {
                                otherItem.classList.remove('expanded');
                            }
                        });

                        // Toggle current item
                        item.classList.toggle('expanded');
                    });
                } else {
                    // This item has only one submenu item or no meaningful content - treat as normal link

                    // Remove parent class to prevent toggle styling
                    item.classList.remove('parent');

                    // Don't add event listener that prevents default
                    // Just let it work as a normal link
                }
            } else if (parentLink && !submenu) {
                // No submenu at all - definitely a normal link
            }
        });
    }

    function expandToActiveCategory() {
        // Only expand on category pages, not on homepage
        const isHomepage = window.location.pathname === '/' || window.location.pathname === '/index.php' || window.location.pathname.endsWith('/');
        if (isHomepage) {
            return;
        }

        // Find active category (marked with 'active', 'has-active', or 'current' class)
        const activeItems = document.querySelectorAll('.navigation .active, .navigation .has-active, .navigation .current');

        // Also check for items with active links
        const activeLinks = document.querySelectorAll('.navigation a.ui-state-active, .navigation a[aria-current="page"]');

        // Combine both searches
        const allActiveElements = [...activeItems, ...activeLinks];

        // Debug: Log what we found

        allActiveElements.forEach(function(activeElement) {

            // Find the closest parent li element
            let currentItem = activeElement.closest('li');

            // Walk up the menu hierarchy and expand all parent menus
            while (currentItem) {

                if (currentItem.classList.contains('parent')) {
                    currentItem.classList.add('expanded');

                    // For Level 0, use different approach - trigger the max-height CSS rule
                    if (currentItem.classList.contains('level0')) {
                        const submenu = currentItem.querySelector('.submenu');
                        if (submenu) {
                            // Force the submenu to be visible by setting max-height directly
                            submenu.style.maxHeight = '1000px';
                            submenu.style.display = 'block';
                        }
                    }
                }

                // Move to the next parent li element
                const parentSubmenu = currentItem.closest('.submenu');
                if (parentSubmenu) {
                    currentItem = parentSubmenu.closest('li');
                } else {
                    break;
                }
            }
        });

        // Also check current URL against menu links
        const currentUrl = window.location.href;

        const allMenuLinks = document.querySelectorAll('.navigation a[href]');

        allMenuLinks.forEach(function(link) {
            if (link.href === currentUrl || link.href.includes(currentUrl.split('?')[0])) {
                let currentItem = link.closest('li');

                // Walk up and expand all parent menus
                while (currentItem) {
                    if (currentItem.classList.contains('parent')) {
                        currentItem.classList.add('expanded');

                        // For Level 0, force visibility
                        if (currentItem.classList.contains('level0')) {
                            const submenu = currentItem.querySelector('.submenu');
                            if (submenu) {

                                submenu.style.maxHeight = '1000px';
                                submenu.style.display = 'block';
                            }
                        }
                    }

                    const parentSubmenu = currentItem.closest('.submenu');
                    if (parentSubmenu) {
                        currentItem = parentSubmenu.closest('li');
                    } else {
                        break;
                    }
                }
            }
        });
    }
});
</script>

